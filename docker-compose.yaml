services:
  postgres_auth:
    image: postgres:15
    container_name: postgres_auth_db
    environment:
      POSTGRES_USER: ${AUTH_DB_USERNAME:-auth_user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-auth_password}
      POSTGRES_DB: ${AUTH_DB_DATABASE:-auth_service_db}
    ports:
      - "5432:5432" # Exposing on host's 5432
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - backend_network
    restart: unless-stopped

  mongo_profile:
    image: mongo:6 # Using Node 20+ for services, so Mongo 6 should be fine
    container_name: mongo_profile_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PROFILE_DB_USERNAME:-profile_user}
      MONGO_INITDB_ROOT_PASSWORD: ${PROFILE_DB_PASSWORD:-profile_password}
    ports:
      - "27017:27017" # Exposing on host's 27017
    volumes:
      - mongo_profile_data:/data/db
    networks:
      - backend_network
    restart: unless-stopped
    command: ["mongod", "--quiet"] # To make logs cleaner

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq_broker
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - backend_network
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile # Assuming you have a Dockerfile for api-gateway
    container_name: api_gateway_app_dev
    environment:
      NODE_ENV: development
      PORT: ${API_GATEWAY_PORT:-3000} # Expose HTTP port for the gateway
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # This needs to be accessible from Google's servers.
      # For local testing, use http://localhost:<HOST_PORT>/auth/google/redirect
      GOOGLE_CALLBACK_URL: http://localhost:${API_GATEWAY_PORT:-3000}/auth/google/redirect
      AUTH_SERVICE_GRPC_URL: auth-service:50051 # Connect to auth-service container
      AUTH_PACKAGE_NAME: auth
      CHOKIDAR_USEPOLLING: "true" # For hot-reloading in Docker
    ports:
      - "${API_GATEWAY_PORT:-3000}:${API_GATEWAY_PORT:-3000}" # Expose API Gateway HTTP port
    depends_on:
      - auth-service # Depends on auth-service being ready for gRPC callsOkay also provide the docker file.
    volumes:
      - ./apps/api-gateway:/usr/src/app/apps/api-gateway
      - ./libs:/usr/src/app/libs
      - /usr/src/app/node_modules # Preserve container's node_modules
    networks:
      - backend_network
    restart: unless-stopped
    # CMD can be in Dockerfile, or define it here:
    # command: npm run start:dev api-gateway

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: auth_service_app_dev
    environment:
      NODE_ENV: development
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT:-50051} # Internal port for the service
      AUTH_DB_HOST: postgres_auth
      AUTH_DB_PORT: 5432 # Internal PostgreSQL port
      AUTH_DB_USERNAME: ${AUTH_DB_USERNAME:-auth_user}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD:-auth_password}
      AUTH_DB_DATABASE: ${AUTH_DB_DATABASE:-auth_service_db}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN:-15m}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-10}
      RABBITMQ_URI: "amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672" # Connect to rabbitmq service name
      RABBITMQ_AUTH_QUEUE: ${RABBITMQ_AUTH_QUEUE:-auth_events_queue}
      CHOKIDAR_USEPOLLING: "true" # For hot-reloading in Docker
    ports:
      - "50051:50051" # Expose service port to host
      # - "9230:9229" # Optional: For Node.js debugging (host:container)
    depends_on:
      - postgres_auth
      - rabbitmq
    volumes:
      - ./apps/auth-service:/usr/src/app/apps/auth-service
      - ./libs:/usr/src/app/libs
      - /usr/src/app/node_modules # Preserve container's node_modules
    networks:
      - backend_network
    restart: unless-stopped
    # The CMD is in the Dockerfile for auth-service

  # Placeholder for other services like profile-service, api-gateway
  # profile-service:
  #   build:
  #     context: .
  #     dockerfile: apps/profile-service/Dockerfile
  #   # ... similar configuration ...
  #   environment:
  #     PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT:-50052}
  #     PROFILE_DB_HOST: mongo_profile
  #     PROFILE_DB_PORT: 27017 # Internal MongoDB port
  #     PROFILE_DB_USERNAME: ${PROFILE_DB_USERNAME:-profile_user}
  #     PROFILE_DB_PASSWORD: ${PROFILE_DB_PASSWORD:-profile_password}
  #     PROFILE_DB_DATABASE: ${PROFILE_DB_DATABASE:-profile_service_db}
  #     # ...
  #   ports:
  #     - "${PROFILE_SERVICE_PORT_HOST:-50052}:${PROFILE_SERVICE_PORT:-50052}"
  #   depends_on:
  #     - mongo_profile
  #   # ... volumes, networks, restart ...

volumes:
  postgres_auth_data:
  mongo_profile_data:
  rabbitmq_data:

networks:
  backend_network:
    driver: bridge