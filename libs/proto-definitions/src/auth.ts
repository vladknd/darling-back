// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.26.1
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

/** libs/proto-definitions/src/auth.proto */

export interface RegisterRequest {
  email: string;
  password: string;
}

export interface RegisterResponse {
  userId: string;
  /** e.g., "Registration successful, verification required" */
  message: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  /** The JWT */
  accessToken: string;
  refreshToken: string;
}

export interface UserIdRequest {
  userId: string;
}

export interface VerificationStatusResponse {
  userId: string;
  /** e.g., "UNVERIFIED", "PENDING", "VERIFIED", "FAILED" */
  status: string;
}

export const AUTH_PACKAGE_NAME = 'auth';

/** The service definition for AuthService */

export interface AuthServiceClient {
  /** Method for registering a user (example) */

  register(request: RegisterRequest): Observable<RegisterResponse>;

  /** Method for login (example) */

  login(request: LoginRequest): Observable<LoginResponse>;

  /** Method to check verification status (example) */

  checkVerificationStatus(
    request: UserIdRequest,
  ): Observable<VerificationStatusResponse>;
}

/** The service definition for AuthService */

export interface AuthServiceController {
  /** Method for registering a user (example) */

  register(
    request: RegisterRequest,
  ):
    | Promise<RegisterResponse>
    | Observable<RegisterResponse>
    | RegisterResponse;

  /** Method for login (example) */

  login(
    request: LoginRequest,
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Method to check verification status (example) */

  checkVerificationStatus(
    request: UserIdRequest,
  ):
    | Promise<VerificationStatusResponse>
    | Observable<VerificationStatusResponse>
    | VerificationStatusResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'register',
      'login',
      'checkVerificationStatus',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
